App.js:

import React, { useEffect, useState } from 'react';
import { Admin, Resource } from 'react-admin';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { onAuthStateChanged } from "firebase/auth";
import { auth } from './firebase';
import Login from './components/Login';
import Register from './components/Register';
import IdentificacionForm from './components/IdentificacionForm';
import PlacaForm from './components/PlacaForm';
import ChasisForm from './components/ChasisForm';
import PropiedadForm from './components/PropiedadForm';
import ClientesForm from './components/ClientesForm';
import VehiculosForm from './components/VehiculosForm';


// Importar CustomAppBar y ProfilePage aquí
import CustomAppBar from './components/CustomAppBar';
import ProfilePage from './components/ProfilePage';
 
function App() {
  const [loading, setLoading] = useState(true);
  const [authenticated, setAuthenticated] = useState(false);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        setAuthenticated(true);
      } else {
        setAuthenticated(false);
      }
      setLoading(false);
    });

    // Cleanup subscription
    return () => {
      unsubscribe();
    };
  }, []);

  if (loading) {
    return <h2>Cargando...</h2>;
  }

  return (
    <Router>
      <Routes>
        <Route path="/login" element={<Login />} />
        <Route path="/register" element={<Register />} />
        <Route path="/profile" element={<ProfilePage />} /> {/* Agregar ruta para la página de perfil aquí */}
        <Route path="*" element={authenticated ? (
          <Admin appBar={CustomAppBar}> {/* Usa CustomAppBar aquí */}
            <Resource name="identificacionForm" options={{ label: 'Buscar por Identificación' }} list={IdentificacionForm} />
            <Resource name="vehiculosForm" options={{ label: 'Buscar Vehiculos' }} list={VehiculosForm} />
            <Resource name="placaForm" options={{ label: 'Buscar por Placa' }} list={PlacaForm} />
            <Resource name="chasisForm" options={{ label: 'Buscar por Chasis' }} list={ChasisForm} />
            <Resource name="propiedadForm" options={{ label: 'Buscar por Propiedad' }} list={PropiedadForm} />
            <Resource name="clientes" options={{ label: 'Consulta Clientes' }} list={ClientesForm} />
          </Admin>
        ) : <Navigate to="/login" replace />}
        />
      </Routes>
    </Router>
  );
}

export default App;

index.js:
import React from 'react';
import { createRoot } from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

reportWebVitals();

firebase.js:
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";

const firebaseConfig = {
    apiKey: "AIzaSyDiwwodBo-JLvlVmzP_m4N6fTu1zLjYhRQ",
    authDomain: "dinardap-c027c.firebaseapp.com",
    projectId: "dinardap-c027c",
    storageBucket: "dinardap-c027c.appspot.com",
    messagingSenderId: "694608177224",
    appId: "1:694608177224:web:237a5031433c1eb561107d",
    measurementId: "G-51ML6VPQLF"
};

const app = initializeApp(firebaseConfig);

const auth = getAuth(app);

export { auth };

Register.js:
import React, { useState } from 'react';
import { createUserWithEmailAndPassword } from "firebase/auth";
import { auth } from '../firebase';
import { useNavigate } from 'react-router-dom';  // Importar useNavigate

export default function Register() {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const navigate = useNavigate();  // Usar useNavigate

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const userCredential = await createUserWithEmailAndPassword(auth, email, password);
            console.log("Usuario registrado: ", userCredential.user);
            navigate('/login');  // Navegar a la página de inicio de sesión después del registro exitoso
        } catch (error) {
            console.error("Error al registrar usuario: ", error.message);
        }
    };

    return (
        <div>
            <h1>Registrarse</h1>
            <form onSubmit={handleSubmit}>
                <label>
                    Correo electrónico:
                    <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} />
                </label>
                <label>
                    Contraseña:
                    <input type="password" value={password} onChange={(e) => setPassword(e.target.value)} autoComplete="new-password" />
                </label>
                <button type="submit">Registrarse</button>
            </form>
        </div>
    );
}

Login.js:

import React, { useState } from 'react';
import { signInWithEmailAndPassword } from "firebase/auth";
import { auth } from '../firebase';
import { useNavigate } from 'react-router-dom';  // Importar useNavigate

export default function Login() {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const navigate = useNavigate();  // Usar useNavigate

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const userCredential = await signInWithEmailAndPassword(auth, email, password);
            console.log("Usuario conectado: ", userCredential.user);
            navigate('/');  // Navegar a la página principal después del inicio de sesión exitoso
        } catch (error) {
            console.error("Error al iniciar sesión: ", error.message);
        }
    };

    return (
        <div>
            <h1>Iniciar sesión</h1>
            <form onSubmit={handleSubmit}>
                <label>
                    Correo electrónico:
                    <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} />
                </label>
                <label>
                    Contraseña:
                    <input type="password" value={password} onChange={(e) => setPassword(e.target.value)} autoComplete="current-password" />
                </label>
                <button type="submit">Iniciar sesión</button>
            </form>
        </div>
    );
}

ProfilePage.js:
import * as React from 'react';
import { useState } from 'react';
import { useTranslate, useNotify, useDataProvider } from 'react-admin';
import { useForm } from 'react-final-form';
import {
    Avatar,
    Card,
    CardContent,
    CardHeader,
    TextField,
    Button,
    Box,
} from '@mui/material';

const ProfilePage = () => {
    const [record, setRecord] = useState();
    const form = useForm();
    const translate = useTranslate();
    const notify = useNotify();
    const dataProvider = useDataProvider();

    const handleSave = values => {
        dataProvider
            .update('profile', { id: record.id, data: values })
            .then(({ data }) => {
                setRecord(data);
                notify('ra.notification.updated', 'info', { smart_count: 1 });
            })
            .catch(error => {
                notify(
                    typeof error === 'string'
                        ? error
                        : error.message || 'ra.notification.http_error',
                    'warning'
                );
            });
    };

    return (
        <Box
            sx={{
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
            }}
        >
            <Card sx={{ maxWidth: 300 }}>
                <CardHeader title={translate('ra.my_profile')} />
                <CardContent>
                    <Box
                        sx={{
                            display: 'flex',
                            justifyContent: 'center',
                            alignItems: 'center',
                        }}
                    >
                        <Avatar sx={{ width: 60, height: 60 }}>
                            {record &&
                                (record.avatar ? (
                                    <img src={record.avatar} alt="" />
                                ) : (
                                    record.name[0]
                                ))}
                        </Avatar>
                    </Box>
                    <div>
                        <TextField
                            label={translate('ra.auth.name')}
                            defaultValue={record && record.name}
                            onBlur={form.submit}
                            onChange={event =>
                                form.change('name', event.target.value)
                            }
                        />
                    </div>
                    <div>
                        <TextField
                            label={translate('ra.auth.email')}
                            defaultValue={record && record.email}
                            onBlur={form.submit}
                            onChange={event =>
                                form.change('email', event.target.value)
                            }
                        />
                    </div>
                    <Button onClick={() => handleSave(form.getState().values)}>
                        Save
                    </Button>
                </CardContent>
            </Card>
        </Box>
    );
};

export default ProfilePage;

CustomAppBar.js:
import * as React from 'react';
import { AppBar, UserMenu, useTranslate } from 'react-admin';
import { MenuItemLink } from 'react-admin';
import ExitToAppIcon from '@mui/icons-material/ExitToApp';
import PersonIcon from '@mui/icons-material/Person';
import { auth } from '../firebase';

const CustomUserMenu = (props) => {
    const translate = useTranslate();
    return (
        <UserMenu {...props}>
            <MenuItemLink
                to="/profile"
                primaryText={translate('ra.my_profile')}
                leftIcon={<PersonIcon />}
            />
            <MenuItemLink
                onClick={() => auth.signOut()}
                primaryText={translate('ra.auth.logout')}
                leftIcon={<ExitToAppIcon />}
            />
        </UserMenu>
    );
};

const CustomAppBar = (props) => <AppBar {...props} userMenu={<CustomUserMenu />} />;

export default CustomAppBar;

package.json:
{
  "homepage": "/datos",
  "name": "data",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@emotion/react": "^11.11.1",
    "@emotion/styled": "^11.11.0",
    "@i2labs/dns": "^1.0.1",
    "@mui/material": "^5.14.1",
    "@mui/x-data-grid": "^6.9.0",
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^0.27.2",
    "bcryptjs": "^2.4.3",
    "browser-resolve": "^2.0.0",
    "chrome-dgram": "^3.0.6",
    "constants-browserify": "^1.0.0",
    "cors": "^2.8.5",
    "crypto-browserify": "^3.12.0",
    "dgram-browserify": "^0.0.13",
    "dns.js": "^1.0.1",
    "express": "^4.18.2",
    "firebase": "^10.1.0",
    "https-browserify": "^1.0.0",
    "jsonwebtoken": "^9.0.1",
    "mssql": "^9.1.1",
    "net-browserify": "^0.2.4",
    "os-browserify": "^0.3.0",
    "prop-types": "^15.8.1",
    "ra-core": "^4.12.2",
    "ra-data-json-server": "^4.11.4",
    "react": "^18.2.0",
    "react-admin": "^4.11.4",
    "react-dom": "^18.2.0",
    "react-final-form": "^6.5.9",
    "react-icons": "^4.10.1",
    "react-native-udp": "^4.1.7",
    "react-redux": "^8.1.1",
    "react-router-dom": "^6.14.2",
    "react-scripts": "5.0.1",
    "recharts": "^2.7.2",
    "redux": "^4.2.1",
    "redux-form": "^8.3.10",
    "redux-thunk": "^2.4.2",
    "soap": "^1.0.0",
    "stream-browserify": "^3.0.0",
    "timers-browserify": "^2.0.12",
    "tls-browserify": "^0.2.2",
    "url": "^0.11.1",
    "util": "^0.12.5",
    "web-vitals": "^2.1.4",
    "xml2js": "^0.6.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "browserify-zlib": "^0.2.0",
    "path-browserify": "^1.0.1",
    "querystring-es3": "^0.2.1",
    "stream-http": "^3.2.0"
  }
}

