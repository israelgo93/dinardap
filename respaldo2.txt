App.js:

import React, { useEffect, useState } from 'react';
import { Admin, Resource } from 'react-admin';
import { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';
import { onAuthStateChanged } from "firebase/auth";
import { auth } from './firebase';
import { FirebaseDataProvider } from 'react-admin-firebase';
import { createTheme, ThemeProvider } from '@mui/material/styles';
import CircularProgress from '@mui/material/CircularProgress'; // Importación del componente CircularProgress

import Login from './components/Login';
import Register from './components/Register';
import IdentificacionForm from './components/IdentificacionForm';
import PlacaForm from './components/PlacaForm';
import ChasisForm from './components/ChasisForm';
import PropiedadForm from './components/PropiedadForm';
import ClientesForm from './components/ClientesForm';
import VehiculosForm from './components/VehiculosForm';
import CustomMenu from './components/CustomMenu';

const theme = createTheme({
  palette: {
    primary: {
      main: '#7986cb', // Nuevo color primario para la AppBar
    },
    secondary: {
      main: '#4db6ac', // Nuevo color secundario
    },
    background: {
      default: '#fafafa', // Nuevo color de fondo
    },
  },
});

const AdminComponent = () => {
  const dataProvider = FirebaseDataProvider({}, auth);

  return (
    <Admin dataProvider={dataProvider} menu={CustomMenu}>
      <Resource name="identificacionForm" options={{ label: 'Buscar por Identificación' }} list={IdentificacionForm} />
      <Resource name="vehiculosForm" options={{ label: 'Buscar Vehiculos' }} list={VehiculosForm} />
      <Resource name="placaForm" options={{ label: 'Buscar por Placa' }} list={PlacaForm} />
      <Resource name="chasisForm" options={{ label: 'Buscar por Chasis' }} list={ChasisForm} />
      <Resource name="propiedadForm" options={{ label: 'Buscar por Propiedad' }} list={PropiedadForm} />
      <Resource name="clientes" options={{ label: 'Consulta Clientes' }} list={ClientesForm} />
    </Admin>
  );
}

function App() {
  const [loading, setLoading] = useState(true);
  const [authenticated, setAuthenticated] = useState(false);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        setAuthenticated(true);
      } else {
        setAuthenticated(false);
      }
      setLoading(false);
    });

    // Cleanup subscription
    return () => {
      unsubscribe();
    };
  }, []);

  if (loading) {
    return (
      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>
        <CircularProgress /> {/* Spinner de carga */}
      </div>
    );
  }

  return (
    <Router basename="/datos">
      <ThemeProvider theme={theme}>
        <Routes>
          <Route path="/login" element={authenticated ? <Navigate to="/" /> : <Login />} />
          <Route path="/register" element={authenticated ? <Navigate to="/" /> : <Register />} />
          <Route path="/*" element={authenticated ? <AdminComponent /> : <Navigate to="/login" />} />
        </Routes>
      </ThemeProvider>
    </Router>
  );
}

export default App;

Login.js:

import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { signInWithEmailAndPassword } from "firebase/auth";
import { auth } from '../firebase';
import { useNavigate } from 'react-router-dom';  
import { Button, TextField, Container, Typography, Box } from '@mui/material';
import styled from 'styled-components';
import validator from 'validator';

const MainWrapper = styled.div`
  min-height: 100vh;
  background: linear-gradient(45deg, #00008B 30%, #800080 90%);
  display: flex;
  align-items: center;
  justify-content: center;
`;

const FormWrapper = styled(Box)`
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: white;
  padding: 20px;
  border-radius: 10px;
`;

export default function Login() {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [errorMessage, setErrorMessage] = useState('');
    const navigate = useNavigate();  

    const handleSubmit = async (e) => {
        e.preventDefault();

        if (!validator.isEmail(email)) {
            setErrorMessage('Por favor, introduce un correo electrónico válido');
            return;
        }

        try {
            const userCredential = await signInWithEmailAndPassword(auth, email, password);
            console.log("Usuario conectado: ", userCredential.user);
            navigate('/');  
        } catch (error) {
            console.error("Error al iniciar sesión: ", error.message);
            setErrorMessage('Correo electrónico o contraseña incorrectos');
        }
    };

    return (
        <MainWrapper>
            <Container component="main" maxWidth="xs">
                <FormWrapper>
                    <Typography component="h1" variant="h5" gutterBottom>
                        PORTAL DINARDAP - EPAM
                    </Typography>
                    <Typography component="h2" variant="h6">
                        Iniciar sesión
                    </Typography>
                    <form onSubmit={handleSubmit}>
                        <TextField
                            variant="outlined"
                            margin="normal"
                            required
                            fullWidth
                            label="Correo electrónico"
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                            autoFocus
                        />
                        <TextField
                            variant="outlined"
                            margin="normal"
                            required
                            fullWidth
                            label="Contraseña"
                            type="password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            autoComplete="current-password"
                        />
                        {errorMessage && (
                            <Typography color="error" align="center" variant="body2" gutterBottom>
                                {errorMessage}
                            </Typography>
                        )}
                        <Button 
                            type="submit"
                            fullWidth
                            variant="contained"
                            color="primary"
                        >
                            Iniciar sesión
                        </Button>
                        <Box mt={2}>
                            <Typography variant="body2" align="center">
                                ¿No tienes cuenta? <Link to="/register">Regístrate</Link>
                            </Typography>
                        </Box>
                    </form>
                </FormWrapper>
            </Container>
        </MainWrapper>
    );
}

Register.js:

import React, { useState } from 'react';
import { createUserWithEmailAndPassword } from "firebase/auth";
import { auth } from '../firebase';
import { useNavigate } from 'react-router-dom';  
import { Button, TextField, Container, Typography, Box, Grid } from '@mui/material';
import validator from 'validator';
import styled from 'styled-components';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';

const MainWrapper = styled.div`
  min-height: 100vh;
  background: linear-gradient(45deg, #00008B 30%, #800080 90%);
  display: flex;
  align-items: center;
  justify-content: center;
`;

const FormWrapper = styled(Box)`
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: white;
  padding: 20px;
  border-radius: 10px;
`;

export default function Register() {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [passwordConfirm, setPasswordConfirm] = useState('');
    const [errorMessage, setErrorMessage] = useState('');
    const navigate = useNavigate();  

    const handleSubmit = async (e) => {
        e.preventDefault();

        // Validación de email
        if (!validator.isEmail(email)) {
            setErrorMessage('Por favor, introduce un correo electrónico válido');
            return;
        }

        // Validación de contraseña
        const passwordRegEx = new RegExp("^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})");
        if (!passwordRegEx.test(password)) {
            setErrorMessage('La contraseña debe tener al menos 8 caracteres, una letra minúscula, una mayúscula, un número y un caracter especial');
            return;
        }

        // Confirmación de contraseña
        if (password !== passwordConfirm) {
            setErrorMessage('Las contraseñas no coinciden');
            return;
        }

        try {
            const userCredential = await createUserWithEmailAndPassword(auth, email, password);
            console.log("Usuario registrado: ", userCredential.user);
            navigate('/login');  
        } catch (error) {
            console.error("Error al registrar usuario: ", error.message);
        }
    };

    return (
        <MainWrapper>
            <Container component="main" maxWidth="xs">
                <FormWrapper>
                    <Typography component="h1" variant="h5">
                        Registrate
                    </Typography>
                    <form onSubmit={handleSubmit}>
                        <TextField
                            variant="outlined"
                            margin="normal"
                            required
                            fullWidth
                            label="Correo electrónico"
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                            autoFocus
                        />
                        <TextField
                            variant="outlined"
                            margin="normal"
                            required
                            fullWidth
                            label="Contraseña"
                            type="password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            autoComplete="new-password"
                        />
                        <TextField
                            variant="outlined"
                            margin="normal"
                            required
                            fullWidth
                            label="Confirmar Contraseña"
                            type="password"
                            value={passwordConfirm}
                            onChange={(e) => setPasswordConfirm(e.target.value)}
                            autoComplete="new-password"
                        />
                        {errorMessage && (
                            <Typography color="error">
                                {errorMessage}
                            </Typography>
                        )}
                        <Button 
                            type="submit"
                            fullWidth
                            variant="contained"
                            color="primary"
                        >
                            Registrarse
                        </Button>
                    </form>
                    <Grid container justifyContent="center" style={{ marginTop: '10px' }}>
                        <Button 
                            startIcon={<ArrowBackIcon />}
                            onClick={() => navigate('/login')}
                            variant="outlined"
                            style={{ color: '#00008B', borderColor: '#00008B' }}
                        >
                            Iniciar Sesión
                        </Button>
                    </Grid>
                </FormWrapper>
            </Container>
        </MainWrapper>
    );
}

firebase.js:

import { initializeApp } from "firebase/app";
import { getAuth, signOut } from "firebase/auth"; // Añadido signOut aquí

const firebaseConfig = {
    apiKey: "AIzaSyDiwwodBo-JLvlVmzP_m4N6fTu1zLjYhRQ",
    authDomain: "dinardap-c027c.firebaseapp.com",
    projectId: "dinardap-c027c",
    storageBucket: "dinardap-c027c.appspot.com",
    messagingSenderId: "694608177224",
    appId: "1:694608177224:web:237a5031433c1eb561107d",
    measurementId: "G-51ML6VPQLF"
};

const app = initializeApp(firebaseConfig);

const auth = getAuth(app);

export { auth, signOut }; // Añadido signOut aquí

"react": "^18.2.0",
    "react-admin": "^4.11.4",
    "react-admin-firebase": "^4.1.2",
    "react-dom": "^18.2.0",