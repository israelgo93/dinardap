App.js:

import React, { useEffect, useState } from 'react';
import { Admin, Resource } from 'react-admin';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { onAuthStateChanged } from "firebase/auth";
import { auth } from './firebase';
import { FirebaseDataProvider } from 'react-admin-firebase';

import Login from './components/Login';
import Register from './components/Register';
import IdentificacionForm from './components/IdentificacionForm';
import PlacaForm from './components/PlacaForm';
import ChasisForm from './components/ChasisForm';
import PropiedadForm from './components/PropiedadForm';
import ClientesForm from './components/ClientesForm';
import VehiculosForm from './components/VehiculosForm';

function App() {
  const [loading, setLoading] = useState(true);
  const [authenticated, setAuthenticated] = useState(false);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        setAuthenticated(true);
      } else {
        setAuthenticated(false);
      }
      setLoading(false);
    });

    // Cleanup subscription
    return () => {
      unsubscribe();
    };
  }, []);

  if (loading) {
    return <h2>Cargando...</h2>;
  }

  const dataProvider = FirebaseDataProvider({}, auth);

  return (
    <Router>
      <Routes>
        <Route path="/login" element={<Login />} />
        <Route path="/register" element={<Register />} />
        <Route path="/profile" element={<ProfilePage />} />
        <Route path="*" element={authenticated ? (
          <Admin appBar={CustomAppBar} sidebar={CustomSidebar} dataProvider={dataProvider}>
            <Resource name="identificacionForm" options={{ label: 'Buscar por Identificación' }} list={IdentificacionForm} />
            <Resource name="vehiculosForm" options={{ label: 'Buscar Vehiculos' }} list={VehiculosForm} />
            <Resource name="placaForm" options={{ label: 'Buscar por Placa' }} list={PlacaForm} />
            <Resource name="chasisForm" options={{ label: 'Buscar por Chasis' }} list={ChasisForm} />
            <Resource name="propiedadForm" options={{ label: 'Buscar por Propiedad' }} list={PropiedadForm} />
            <Resource name="clientes" options={{ label: 'Consulta Clientes' }} list={ClientesForm} />
          </Admin>
        ) : <Navigate to="/login" replace />}
        />
      </Routes>
    </Router>
  );
}

export default App;

Login.js:
import React, { useState } from 'react';
import { signInWithEmailAndPassword } from "firebase/auth";
import { auth } from '../firebase';
import { useNavigate } from 'react-router-dom';  // Importar useNavigate

export default function Login() {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const navigate = useNavigate();  // Usar useNavigate

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const userCredential = await signInWithEmailAndPassword(auth, email, password);
            console.log("Usuario conectado: ", userCredential.user);
            navigate('/');  // Navegar a la página principal después del inicio de sesión exitoso
        } catch (error) {
            console.error("Error al iniciar sesión: ", error.message);
        }
    };

    return (
        <div>
            <h1>Iniciar sesión</h1>
            <form onSubmit={handleSubmit}>
                <label>
                    Correo electrónico:
                    <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} />
                </label>
                <label>
                    Contraseña:
                    <input type="password" value={password} onChange={(e) => setPassword(e.target.value)} autoComplete="current-password" />
                </label>
                <button type="submit">Iniciar sesión</button>
            </form>
        </div>
    );
}

Register.js:
import React, { useState } from 'react';
import { createUserWithEmailAndPassword } from "firebase/auth";
import { auth } from '../firebase';
import { useNavigate } from 'react-router-dom';  // Importar useNavigate

export default function Register() {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const navigate = useNavigate();  // Usar useNavigate

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const userCredential = await createUserWithEmailAndPassword(auth, email, password);
            console.log("Usuario registrado: ", userCredential.user);
            navigate('/login');  // Navegar a la página de inicio de sesión después del registro exitoso
        } catch (error) {
            console.error("Error al registrar usuario: ", error.message);
        }
    };

    return (
        <div>
            <h1>Registrarse</h1>
            <form onSubmit={handleSubmit}>
                <label>
                    Correo electrónico:
                    <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} />
                </label>
                <label>
                    Contraseña:
                    <input type="password" value={password} onChange={(e) => setPassword(e.target.value)} autoComplete="new-password" />
                </label>
                <button type="submit">Registrarse</button>
            </form>
        </div>
    );
}

firebase.js:
import { initializeApp } from "firebase/app";
import { getAuth, signOut } from "firebase/auth"; // Añadido signOut aquí

const firebaseConfig = {
    apiKey: "AIzaSyDiwwodBo-JLvlVmzP_m4N6fTu1zLjYhRQ",
    authDomain: "dinardap-c027c.firebaseapp.com",
    projectId: "dinardap-c027c",
    storageBucket: "dinardap-c027c.appspot.com",
    messagingSenderId: "694608177224",
    appId: "1:694608177224:web:237a5031433c1eb561107d",
    measurementId: "G-51ML6VPQLF"
};

const app = initializeApp(firebaseConfig);

const auth = getAuth(app);

export { auth, signOut };

IdentificacionForm.js:

import React, { useState } from 'react';
import axios from 'axios';
import { Button, TextField, Container, Grid } from '@mui/material';
import { DataGrid, GridToolbar } from '@mui/x-data-grid';

const IdentificacionForm = () => {
  const [identificacion, setIdentificacion] = useState('');
  const [rows, setRows] = useState([]);
  const [validInput, setValidInput] = useState(false);

  const columns = [
    { field: 'datos', headerName: 'Datos', width: 300 },
    { field: 'descripcion', headerName: 'Descripción', width: 300 },
  ];

  const fieldsOrder = [
    'cedula', 'nombre', 'profesion', 'fechaExpedicion', 'fechaExpiracion',
    'condicionCiudadano', 'fechaNacimiento', 'lugarNacimiento', 'conyuge',
    'estadoCivil', 'fechaInscripcionDefuncion', 'actaDefuncion', 'fechaDefuncion'
  ];

  const fieldsMap = {
    'cedula': 'Cédula',
    'nombre': 'Nombres Completos',
    'profesion': 'Profesión',
    'fechaExpedicion': 'Fecha Expedición de Cédula',
    'fechaExpiracion': 'Fecha Expiración de Cédula',
    'condicionCiudadano': 'Condición Ciudadano',
    'fechaNacimiento': 'Fecha Nacimiento',
    'lugarNacimiento': 'Lugar Nacimiento',
    'conyuge': 'Cónyugue',
    'estadoCivil': 'Estado Civil',
    'fechaInscripcionDefuncion': 'Fecha Inscripción Defunción',
    'actaDefuncion': 'Acta de Defunción',
    'fechaDefuncion': 'Fecha Defunción',
  };

  const isValidCedula = (cedula) => {
    const coeficientes = [2, 1, 2, 1, 2, 1, 2, 1, 2];
    let total = 0;

    if (cedula.length !== 10) {
      return false;
    }

    for (let i = 0; i < coeficientes.length; i++) {
      let valor = coeficientes[i] * parseInt(cedula[i]);
      if (valor >= 10) {
        valor = valor - 9;
      }
      total += valor;
    }

    total = total % 10 === 0 ? 0 : 10 - (total % 10);

    return total === parseInt(cedula[9]);
  };

  const handleChange = (e) => {
    setIdentificacion(e.target.value);
    setValidInput(isValidCedula(e.target.value));
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && validInput) {
      handleSearch();
    }
  };

  const handleSearch = async () => {
    try {
      if (validInput) {
        const response = await axios.get('http://192.168.10.89:3001/consultar', {
          params: { identificacion },
        });

        if (Object.keys(response.data).length === 0) {
          setRows([]);
        } else {
          const data = response.data.paquete.entidades.entidad[0].filas.fila[0].columnas.columna;
          const dataMap = data.reduce((acc, item) => ({
            ...acc,
            [item.campo]: item.valor,
          }), {});

          const formattedData = fieldsOrder.map((field, i) => ({
            id: i,
            datos: fieldsMap[field],
            descripcion: dataMap[field],
          }));

          setRows(formattedData);
        }
      } else {
        console.error('La identificación no es válida');
      }
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <Container maxWidth="lg" style={{ height: 900, marginTop: '2em' }}>
      <Grid container spacing={2} alignItems="center">
        <Grid item xs={12} sm={6} md={4}>
          <TextField
            label="Identificación"
            variant="outlined"
            value={identificacion}
            onChange={handleChange}
            onKeyDown={handleKeyDown}
            fullWidth
          />
        </Grid>
        <Grid item>
          <Button variant="contained" color="primary" onClick={handleSearch} disabled={!validInput}>
            Buscar
          </Button>
        </Grid>
      </Grid>
      <div style={{ height: 600, width: '100%', marginTop: '2em' }}>
        <DataGrid
          rows={rows}
          columns={columns}
          pageSize={6}
          components={{
            Toolbar: GridToolbar,
          }}
          density="compact"
        />
      </div>
    </Container>
  );
};

export default IdentificacionForm;


package.json:
{
  "homepage": "/datos",
  "name": "data",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@emotion/react": "^11.11.1",
    "@emotion/styled": "^11.11.0",
    "@i2labs/dns": "^1.0.1",
    "@mui/material": "^5.14.1",
    "@mui/x-data-grid": "^6.9.0",
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^0.27.2",
    "bcryptjs": "^2.4.3",
    "browser-resolve": "^2.0.0",
    "chrome-dgram": "^3.0.6",
    "constants-browserify": "^1.0.0",
    "cors": "^2.8.5",
    "crypto-browserify": "^3.12.0",
    "dgram-browserify": "^0.0.13",
    "dns.js": "^1.0.1",
    "express": "^4.18.2",
    "firebase": "^10.1.0",
    "https-browserify": "^1.0.0",
    "jsonwebtoken": "^9.0.1",
    "mssql": "^9.1.1",
    "net-browserify": "^0.2.4",
    "os-browserify": "^0.3.0",
    "prop-types": "^15.8.1",
    "ra-core": "^4.12.2",
    "ra-data-json-server": "^4.11.4",
    "react": "^18.2.0",
    "react-admin": "^4.11.4",
    "react-dom": "^18.2.0",
    "react-final-form": "^6.5.9",
    "react-icons": "^4.10.1",
    "react-native-udp": "^4.1.7",
    "react-redux": "^8.1.1",
    "react-router-dom": "^6.14.2",
    "react-scripts": "5.0.1",
    "recharts": "^2.7.2",
    "redux": "^4.2.1",
    "redux-form": "^8.3.10",
    "redux-thunk": "^2.4.2",
    "soap": "^1.0.0",
    "stream-browserify": "^3.0.0",
    "timers-browserify": "^2.0.12",
    "tls-browserify": "^0.2.2",
    "url": "^0.11.1",
    "util": "^0.12.5",
    "web-vitals": "^2.1.4",
    "xml2js": "^0.6.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "browserify-zlib": "^0.2.0",
    "path-browserify": "^1.0.1",
    "querystring-es3": "^0.2.1",
    "stream-http": "^3.2.0"
  }
}

